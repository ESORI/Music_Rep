DROP DATABASE IF EXISTS MUSIC_REP;
CREATE DATABASE IF NOT EXISTS MUSIC_REP;
USE MUSIC_REP;

CREATE TABLE IF NOT EXISTS ARTIST (
    ID_ARTIST INT PRIMARY KEY AUTO_INCREMENT,
    GROUP_NAME VARCHAR(35) NOT NULL,
    MONTHLY_LIST INT
);

CREATE TABLE IF NOT EXISTS ARTIST_DATA (
    ID_ARTIST INT PRIMARY KEY,
    COUNTRY CHAR(3),
    LANG CHAR(3),
    DEBUT_YEAR INT,
    FOREIGN KEY (ID_ARTIST) REFERENCES ARTIST(ID_ARTIST) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS USER (
    ID_USER INT PRIMARY KEY AUTO_INCREMENT,
    USERNAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS USER_DATA (
    ID_USER INT PRIMARY KEY,
    USER_NAME VARCHAR(20),
    PHONE_NUM INT(9),
    COUNTRY CHAR(3),
    AGE INT,
    FOREIGN KEY (ID_USER) REFERENCES USER(ID_USER) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ALBUM(
    ID_ALBUM INT AUTO_INCREMENT,
    ID_ARTIST INT NOT NULL,
    ALBUM_NAME VARCHAR(25) DEFAULT 'SOLO',
    QUANTITY_SONGS INT,
    CONSTRAINT ALBUM_PK PRIMARY KEY (ID_ALBUM, ID_ARTIST),
    FOREIGN KEY(ID_ARTIST) REFERENCES ARTIST(ID_ARTIST) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SONG (
    ID_SONG INT AUTO_INCREMENT,
    ID_ALBUM INT NOT NULL,
    ID_ARTIST INT NOT NULL,
    SONG_NAME TEXT,
    DURATION INT NOT NULL,
    CONSTRAINT SONG_PK PRIMARY KEY (ID_SONG, ID_ALBUM, ID_ARTIST),
    FOREIGN KEY (ID_ALBUM, ID_ARTIST) REFERENCES ALBUM(ID_ALBUM, ID_ARTIST) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PLAYLIST (
    ID_PLAYLIST INT PRIMARY KEY AUTO_INCREMENT,
    QUANTITY_SONGS INT,
    PLAYLIST_NAME TEXT,
    DESCRIPTION TEXT,
    DURATION INT
);

CREATE TABLE IF NOT EXISTS PLAYLIST_USER(
    ID_PLAYLIST INT,
    ID_USER INT,
    PRIMARY KEY (ID_PLAYLIST, ID_USER),
    FOREIGN KEY(ID_PLAYLIST) REFERENCES PLAYLIST(ID_PLAYLIST) ON DELETE CASCADE,
    FOREIGN KEY(ID_USER) REFERENCES USER(ID_USER) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PLAYLIST_SONG(
    ID_PLAYLIST INT,
    ID_SONG INT,
    PRIMARY KEY (ID_PLAYLIST, ID_SONG),
    FOREIGN KEY(ID_PLAYLIST) REFERENCES PLAYLIST(ID_PLAYLIST) ON DELETE CASCADE,
    FOREIGN KEY(ID_SONG) REFERENCES SONG(ID_SONG) ON DELETE CASCADE
);